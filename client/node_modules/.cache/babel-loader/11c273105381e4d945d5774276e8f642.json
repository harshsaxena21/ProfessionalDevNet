{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from \"./types\"; // Load user\n\nexport const loadUser = () => async dispatch => {\n  try {\n    const res = await api.get('/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register user\n\nexport const register = formData => async dispatch => {\n  try {\n    const res = await api.post('/users', formData);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login user\n\nexport const login = (email, password) => async dispatch => {\n  const body = {\n    email,\n    password\n  };\n\n  try {\n    const res = await api.post('/auth', body);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout\n\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"sources":["/Users/harshsaxena/Desktop/Professional network/client/src/actions/auth.js"],"names":["api","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","res","get","type","payload","data","err","register","formData","post","errors","response","forEach","error","msg","login","email","password","body","logout"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAAUC,QAAV,QAA0B,SAA1B;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,UANF,EAOCC,MAPD,QAQO,SARP,C,CAUA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC/C,MAAI;AACH,UAAMC,GAAG,GAAG,MAAMX,GAAG,CAACY,GAAJ,CAAQ,OAAR,CAAlB;AAEAF,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAET,WADE;AAERU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFL,KAAD,CAAR;AAIA,GAPD,CAOE,OAAOC,GAAP,EAAY;AACbN,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAER;AADE,KAAD,CAAR;AAGA;AACD,CAbM,C,CAeP;;AACA,OAAO,MAAMY,QAAQ,GAAGC,QAAQ,IAAI,MAAMR,QAAN,IAAkB;AACrD,MAAI;AACH,UAAMC,GAAG,GAAG,MAAMX,GAAG,CAACmB,IAAJ,CAAS,QAAT,EAAmBD,QAAnB,CAAlB;AAEAR,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEX,gBADE;AAERY,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFL,KAAD,CAAR;AAIAL,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AAEA,GATD,CASE,OAAOO,GAAP,EAAY;AACb,UAAMI,MAAM,GAAGJ,GAAG,CAACK,QAAJ,CAAaN,IAAb,CAAkBK,MAAjC;;AAEA,QAAGA,MAAH,EAAW;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIb,QAAQ,CAACT,QAAQ,CAACsB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACA;;AACDd,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEV;AADE,KAAD,CAAR;AAGA;AACD,CApBM,C,CAsBP;;AACA,OAAO,MAAMsB,KAAK,GAAG,CAAEC,KAAF,EAASC,QAAT,KAAuB,MAAMjB,QAAN,IAAkB;AAE7D,QAAMkB,IAAI,GAAG;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAb;;AAEA,MAAI;AACH,UAAMhB,GAAG,GAAG,MAAMX,GAAG,CAACmB,IAAJ,CAAS,OAAT,EAAkBS,IAAlB,CAAlB;AAEAlB,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEP,aADE;AAERQ,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFL,KAAD,CAAR;AAIAL,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AAEA,GATD,CASE,OAAOO,GAAP,EAAY;AACb,UAAMI,MAAM,GAAGJ,GAAG,CAACK,QAAJ,CAAaN,IAAb,CAAkBK,MAAjC;;AAEA,QAAGA,MAAH,EAAW;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIb,QAAQ,CAACT,QAAQ,CAACsB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACA;;AACDd,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEN;AADE,KAAD,CAAR;AAGA;AACD,CAvBM,C,CAyBP;;AACA,OAAO,MAAMsB,MAAM,GAAG,OAAO;AAAChB,EAAAA,IAAI,EAAEL;AAAP,CAAP,CAAf","sourcesContent":["import api from '../utils/api';\nimport  { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n\tLOGOUT\n} from \"./types\";\n\n// Load user\nexport const loadUser = () => async dispatch => {\n\ttry {\n\t\tconst res = await api.get('/auth')\n\t\t\n\t\tdispatch({\n\t\t\ttype: USER_LOADED,\n\t\t\tpayload: res.data\n\t\t})\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: AUTH_ERROR\n\t\t})\n\t}\n};\n\n// Register user\nexport const register = formData => async dispatch => {\n\ttry {\n\t\tconst res = await api.post('/users', formData);\n\n\t\tdispatch({\n\t\t\ttype: REGISTER_SUCCESS,\n\t\t\tpayload: res.data\n\t\t})\n\t\tdispatch(loadUser());\n\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\n\t\tif(errors) {\n\t\t\terrors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n\t\t}\n\t\tdispatch({\n\t\t\ttype: REGISTER_FAIL,\n\t\t})\n\t}\n};\n\n// Login user\nexport const login = ( email, password ) => async dispatch => {\n\t\n\tconst body = { email, password }\n \n\ttry {\n\t\tconst res = await api.post('/auth', body);\n\n\t\tdispatch({\n\t\t\ttype: LOGIN_SUCCESS,\n\t\t\tpayload: res.data\n\t\t})\n\t\tdispatch(loadUser());\n\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\n\t\tif(errors) {\n\t\t\terrors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n\t\t}\n\t\tdispatch({\n\t\t\ttype: LOGIN_FAIL,\n\t\t})\n\t}\n};\n\n// Logout\nexport const logout = () => ({type: LOGOUT});"]},"metadata":{},"sourceType":"module"}